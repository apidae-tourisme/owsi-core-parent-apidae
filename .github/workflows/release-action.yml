
# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

name: Release, deploy and create next iteration

on:
  workflow_dispatch:
    inputs:
      release_version:
        description: "Release number version to create"
        required: true
      next_version:
        description: "SNAPSHOT number of the next development version"
        required: true

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      # Label used to access the service container
      postgres:
        # Docker Hub image
        image: postgis/postgis:12-master
        # Provide the password for postgres
        env:
          POSTGRES_PASSWORD: owsicore_test
          POSTGRES_USER: owsicore_test
          POSTGRES_DB: owsicore_test
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          --name owsicore-db
        ports:
          # Maps tcp port 5432 on service container to the host
          - 6432:5432
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'adopt'
      - name: Build and test
        run: |
          docker ps -a
          docker exec owsicore-db psql -U owsicore_test -d owsicore_test -c "CREATE SCHEMA owsicore" &&
          mvn clean install
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_USERNAME: ${{ github.actor }}

  prepare-release:
    runs-on: ubuntu-latest
    needs: [test]
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v3
        with:
          token: ${{secrets.TOKEN_RELEASE}}
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'adopt'
          cache: maven
      - name: Configure Git user email
        run: git config user.email "actions@github.com"
      - name: Configure Git username
        run: git config user.name "GitHub Actions"
      - run: echo running on branch ${GITHUB_REF##*/}
      - name: Set release version
        run: |
          mvn versions:set -DnewVersion=$RELEASE -DprocessAllModules -DgenerateBackupPoms=false
          git add . && git commit -m "[github action]: prepare release $RELEASE"
          git tag $RELEASE
        env:
          RELEASE: ${{ github.event.inputs.release_version }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_USERNAME: ${{ github.actor }}
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-region: eu-west-3
      - name: Deploy release
        run: mvn --batch-mode -Dmaven.test.skip=true -DperformRelease deploy
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_USERNAME: ${{ github.actor }}
      - name: Prepare next development version
        run: |
          mvn versions:set -DnewVersion=$SNAPSHOT -DprocessAllModules -DgenerateBackupPoms=false
          git add . && git commit -m "[github action]: new development version $SNAPSHOT"
          git push origin ${GITHUB_REF##*/} --tags
        env:
          SNAPSHOT: ${{ github.event.inputs.next_version }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_USERNAME: ${{ github.actor }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
